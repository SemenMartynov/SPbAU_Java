/**
 * Copyright 2013 Semen A Martynov <semen.martynov@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package ru.spbau.martynov.task9;

import java.util.Random;

/**
 * @author Semen Martynov
 * 
 *         Client threads that are not able to perform the computing task.
 */
public class StupidChild implements Runnable {

	/**
	 * Task management service.
	 */
	private final DistributedIncrementor distributedIncrementor;
	/**
	 * Number of client thread.
	 */
	private final int id;
	/**
	 * An array of numbers that need to be increased.
	 */
	private final int[] numbers;

	/**
	 * 
	 * @param id
	 *            number of client thread.
	 * @param distributedIncrementor
	 *            task management service.
	 * @param numberLowerBound
	 *            lower bound for the number, generated by each client thread.
	 * @param numberUpperBound
	 *            upper bound for the number, generated by each client thread.
	 * @param numbersQuantity
	 *            quantity of numbers, generated by each client thread.
	 */
	public StupidChild(int id, DistributedIncrementor distributedIncrementor,
			int numberLowerBound, int numberUpperBound, int numbersQuantity) {
		this.id = id;
		this.distributedIncrementor = distributedIncrementor;

		Random random = new Random();

		numbers = new int[numbersQuantity];
		for (int i = 0; i < numbersQuantity; i++) {
			numbers[i] = numberLowerBound
					+ random.nextInt(numberUpperBound - numberLowerBound);
		}
	}

	/**
	 * Thread requests a result of the calculation, and outputs it to the
	 * console.
	 */
	@Override
	public void run() {
		for (int i = 0; i < numbers.length; i++) {
			int result;
			try {
				result = distributedIncrementor.increment(numbers[i]);
			} catch (InterruptedException e) {
				break;
			}

			// System.out.printf("Child %d increased the number from %d to %d.\n",
			// id, numbers[i], result);
			System.out.printf(
					"Child %d increased the number from %d to %d. (%d)\n", id,
					numbers[i], result, i);
		}
	}
}
